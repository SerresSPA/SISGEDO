<?php

namespace App\Http\Controllers;
use App\solicitudeproceso;
use App\usuconfomulario;
use App\User;
use App\usuconformulario;
use App\estructura;
use App\proyecto;
use App\zoho;
use App\empresa;
use App\seguimiento;
use App\solicituddocumento;
use Mail;
use App\Mail\NotificacionSolicitudObservada;
use App\Mail\NotificacionSolicitudLiberada;
use App\Exports\SolicitudesExport;
use Illuminate\Http\Request;
use Alert;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\ZohoExport;


class solicitudesAdminController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public $tipo="Admin";
    public $enviada="Enviada";
    public $liberada="Liberada";
    public $aprobada="Aprobada";
    public $asignada="Asignada";
    public $declaracion="Declaracion";
    public $comentario;
    public $cero=0;
    public $leyenda="Solicitud Ingresada por Primera Vez";
    public $mail;
    public $fechaActual;
    public $nomInspector;
    
    // zoho

    public $asigna_enrevision="EN REVISION";
    public $rechazada_conobservaciones="CON OBSERVACIONES";
    public $liberada_certificado="CERTIFICADO";
    public $firma="Solicitud Enviada a Firma";
    public $mensajeFirma;
    public $SolicitudObservada="Solicitud Observada";
    public $alias;
    public $nombreMandante;
    public $rutMandante;
    public $nombreInspector;
    public $nombreContratista;
    public $rutContratista;
    public $contratista_id;
    public $proyecto_id;
    public $proyecto;
    public $contrato;
    public $ncert;
    public $control_doc_trab;
    public $control_doc_emp;
    public $evaluacion_fin;
    public $otra_observacion;
    public $n_solicitud;
    public $tipo_fecha;
    public function index()
    {
        
        $solicitudes=solicitudeproceso::where('inspector_id',NULL)->where('estado',$this->enviada)->orWhere('estado',$this->declaracion)->where('inspector_id',NULL)->get();
        //$primerEnvio=seguimiento::where('comentario',$this->leyenda)->get();
        
        return view('Admin.solicitudesNuevas',compact('solicitudes')); //,'primerEnvio'
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        
        


        $solicitud=solicitudeproceso::where('id',$id)->get();
        foreach($solicitud as $usuconformid){
            $this->usuconform_id = $usuconformid->usuconformulario_id;
        }

        $usufor=usuconformulario::where('id',$this->usuconform_id)->get();
       
        foreach($usufor as $formulario){
            $this->tipoFormulario = $formulario->formulario;
        }

      

        $inspectores=user::where('Tipo',$this->tipo)->get();
        $solicitud=solicitudeproceso::where('id',$id)->get();
        $documentos=solicituddocumento::where('solicitudeproceso_id',$id)->get();

            if ($this->tipoFormulario==1){
                    return view('Admin.edicionAsignacionSolicitud',compact('solicitud','inspectores','documentos'));
            }elseif($this->tipoFormulario==2){
                return view('Admin.edicionAsignacionSolicitudDocumentos',compact('solicitud','inspectores','documentos'));
            }


    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request,$id)
    {
        $solicitud = solicitudeproceso::where('id',$id)->get();
        foreach($solicitud as $usuario_id){
            $usuario=user::where('id',$usuario_id->user_id)->get();
                foreach($usuario as $mail_usuario){
                    $this->mail=$mail_usuario->email;
                }
        }
        //dd($request);
        $user = auth()->User()->id;
         //bitacora de asignada



         if($request->estado=='Asignada'){
             if ($request->observaciones!="")
                $this->comentario="Solicitud Asignada"."- Observación: ".$request->observaciones;
            else
                $this->comentario="Solicitud Asignada".$request->observaciones;
                seguimiento::create([
                    'solicitudeproceso_id'=>$id,
                    'comentario'=>$this->comentario,
                    'user_id'=>$user,
                    'inspector_id'=>$user,
                 ]);
                 $this->fechaActual= new \DateTime();
                 $act=solicitudeproceso::where('id',$id)->update(['inspector_id'=>$request->inspector_id,'estado'=>$request->estado,'observaciones'=>$request->observaciones,'fechaAsignacion'=>$this->fechaActual]);
                 $inspectorNombre=User::where('id',$request->inspector_id)->get();
                 foreach($inspectorNombre as $inspector){
                     $this->nomInspector=$inspector->name;
                 }
                 $zohoUpdate=zoho::where('id_solicitud',$id)->update(['ejecutivo'=>$this->nomInspector,'estado'=>$this->asigna_enrevision]);
         }
         // fin bitacora
       
          //bitacora de asignada
          if($request->estado=='Rechazada'){
            $this->comentario="Solicitud Observada"."- Observación: ".$request->observaciones;
            seguimiento::create([
                'solicitudeproceso_id'=>$id,
                'comentario'=>$this->comentario,
                'user_id'=>$user,
                'inspector_id'=>$user,
            ]);
            
            $act=solicitudeproceso::where('id',$id)->update(['inspector_id'=>$request->inspector_id,'estado'=>$request->estado,'observaciones'=>$request->observaciones]);
            $inspectorNombre=User::where('id',$request->inspector_id)->get();
            foreach($inspectorNombre as $inspector){
                $this->nomInspector=$inspector->name;
            }
            $actZoho=zoho::where('id_solicitud',$id)->update(['ejecutivo'=>$this->nomInspector,'estado'=>$this->rechazada_conobservaciones]);
    
            Mail::to($this->mail)->send(new NotificacionSolicitudObservada($id));
         
        }
        // fin bitacora
        
        
        //$id->update($request->all());
        // if($request->estado!='Declaracion'){
        //     $act=solicitudeproceso::where('id',$id)->update(['inspector_id'=>$request->inspector_id,'estado'=>$request->estado,'observaciones'=>$request->observaciones]);
        // }else{
        //     $act=solicitudeproceso::where('id',$id)->update(['inspector_id'=>$request->inspector_id]); //'estado'=>$request->estado,'observaciones'=>$request->observaciones
        // }

        $primerEnvio=seguimiento::where('comentario',$this->leyenda)->get();
        $solicitudes=solicitudeproceso::where('inspector_id',NULL)->where('estado','Enviada')->get();
        Alert::success('Solicitud Procesada Correctamente');
        return view('Admin.solicitudesNuevas',compact('solicitudes','primerEnvio'));
        
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        return "ok";
    }

    public function Aprobar(){
        $solicitudes=solicitudeproceso::where('certificado','!=',0)->where('estado',$this->aprobada)->get();
       
        return view('Admin.solicitudesxAprobar',compact('solicitudes'));
    }

    public function ApruebaCertificado($id,$nfact){

      
        
         $this->comentario="Aprobada";
         seguimiento::create([
             'solicitudeproceso_id'=>$id,
             'comentario'=>$this->comentario,
             'user_id'=>1,
             'inspector_id'=>1,
             ]);
         // fin bitacora
            //numero de solicitud asignada una vez liberada
            $solicitudNumero=solicitudeproceso::where('id',$id)->get();
            foreach($solicitudNumero as $ncertificado){
                $this->ncert = $ncertificado->certificado;
                $this->n_solicitud=$ncertificado->certificado;
                $this->tipo_fecha=$ncertificado->ano;
            }
            $this->fechaActual= new \DateTime();
            
            if ( $this->n_solicitud==10){
                $this->liberada_certificado="SIN MOVIMIENTO";
                if ($this->tipo_fecha==NULL){
                    $this->liberada_certificado="AUDITADO";
                }
                $actZoho=zoho::where('id_solicitud',$id)->update(['estado'=>$this->liberada_certificado,'n_certificado'=>null,'fecha_emision'=>$this->fechaActual,'factura'=>$nfact]);
                $act=solicitudeproceso::where('id',$id)->update(['estado'=>$this->liberada,'nfactura'=>$nfact]);
            }else{

                $actZoho=zoho::where('id_solicitud',$id)->update(['estado'=>$this->liberada_certificado,'n_certificado'=>'C-'.$this->ncert,'fecha_emision'=>$this->fechaActual,'factura'=>$nfact]);
                $act=solicitudeproceso::where('id',$id)->update(['estado'=>$this->liberada,'nfactura'=>$nfact]);
            }
        
        
        
        
        //$act=solicitudeproceso::where('id',$id)->update(['estado'=>$this->liberada]);

        
        return;
        
        

    }

    
    public function liberadasFecha(){
        return view('Admin.LiberadasxFecha');
    }
    
    public function resultadolliberadasxfecha(request $request){

      
        $this->estado="Liberada";
        
        $solicitudesNuevas=solicitudeproceso::with('solicituddocumento')->where('estado',$this->estado)->wheredate('fechaEnvio',">=",$request->fechai)->wheredate('fechaEnvio',"<=",$request->fechaf)->get();
        
        return view('Admin.solicitudesFinalizadasLiberadas',compact('solicitudesNuevas'));
    }

    public function ccolpxfechasForm(){
        return view('Admin.ccolpxfechas');
    }

    public function ccolpxfechasReporte(request $request){

        $users=user::where('Tipo',$this->tipo)->get();
        //$primerEnvio=seguimiento::where('comentario',$this->leyenda)->get();
        $solicitudes=solicitudeproceso::wheredate('fechaEnvio',">=",$request->fechai)->wheredate('fechaEnvio',"<=",$request->fechaf)->get();
        return view('Admin.ccolpExcel',compact('solicitudes')); //,'primerEnvio'
        //return (new SolicitudesExport($request->fechai,$request->fechaf))->download('invoices.xlsx');
    }

    public function reasignaSolicitud(){
        $inspectores=user::where('Tipo',$this->tipo)->get();
        return view('Admin.reasignarSolicitudes',compact('inspectores'));
    }

    public function reasignarSolicitudstore(Request $request){
        $buscar=solicitudeproceso::where('id',$request->solicitud_id)->get();
        foreach($buscar as $solicitud){
             $this->comentario=$solicitud->id;
        }
           
        

        if(empty($this->comentario)){
            Alert::error('Número de Solicitud no Existe');
        }else{
            
            
            $act=solicitudeproceso::where('id',$request->solicitud_id)->update(['inspector_id'=>$request->inspector_id]);
            $inspectorNombre=User::where('id',$request->inspector_id)->get();
            foreach($inspectorNombre as $inspector){
                $this->nomInspector=$inspector->name;


            }
            $actZoho=zoho::where('id_solicitud',$request->solicitud_id)->update(['ejecutivo'=>$this->nomInspector]);

            $this->comentario="Solicitud Reasignada al Nuevo Inspector";
            seguimiento::create([
                'solicitudeproceso_id'=>$request->solicitud_id,
                'comentario'=>$this->comentario,
                'user_id'=>1,
                'inspector_id'=>$request->inspector_id,
            ]);

            Alert::success('Solicitud Reasignada con Exito');
        }
        
        $inspectores=user::where('Tipo',$this->tipo)->get();
        return view('Admin.reasignarSolicitudes',compact('inspectores'));
    }

    public function RechazaCertificado($id){

       
         //bitacora de Reenvío por rechazo
        
         $this->comentario="En Revisión";
         seguimiento::create([
             'solicitudeproceso_id'=>$id,
             'comentario'=>$this->comentario,
             'user_id'=>1,
             'inspector_id'=>1,
             ]);
         // fin bitacora

         $act=solicitudeproceso::where('id',$id)->update(['estado'=>$this->asignada,'certificado'=>$this->cero]);
         
         return;
         zoho::where('id_solicitud',$id)->update(['estado'=>$this->asigna_enrevision,'certificado'=>$this->cero]);
        
        

    }

    public function zoho(){
        //return response()->download(public_path('/Archivos/zoho/excel.xlsx'));
        return Excel::download(new ZohoExport, 'excel.csv');
    }

    public function zohovolcado(){
        //$solicitudes=solicitudeproceso::all();
        $solicitudes=solicitudeproceso::where('id',">=",100000)->where('id',"<=",200000)->get();

        foreach($solicitudes as $solicitud){

            $estructura=estructura::where('id',$solicitud->estructura_id)->get();

                foreach($estructura as $contratista){
                    $this->contratista_id=$contratista->empresa_id;
                     $empresas=empresa::where('id',$this->contratista_id)->get();
                            foreach($empresas as $datoContratista){
                                $this->nombreContratista=$datoContratista->nombre;
                                $this->rutContratista=$datoContratista->rut;

                            
                                $this->proyecto_id=$contratista->proyecto_id;
                                $this->contrato=$contratista->contrato;

                       
                               
                                
                                    $datoProyecto=proyecto::where('id',$this->proyecto_id)->get();
                                        foreach($datoProyecto as $datoMandante){
                                                $this->proyecto=$datoMandante->proyecto;
                                                $this->mandante_id=$datoMandante->empresa_id;
                                                    $mandantes=empresa::where('id',$this->mandante_id)->get();
                                                        foreach($mandantes as $mandante){
                                                            $this->nombreMandante=$mandante->nombre;
                                                            $this->rutMandante=$mandante->rut;
                                                            $this->alias=$mandante->mutualidad;
                                                        }
                                        }

                            }

                }
                $inspector=User::where('id',$solicitud->inspector_id)->get();
                    foreach($inspector as $inspectorAsignado){
                        $this->nombreInspector=$inspectorAsignado->name;
                    }
            
          if($solicitud->estado=='Rechazada'){
               $obs=seguimiento::where('solicitudeproceso_id',$solicitud->id)->where('comentario', "like", "%" . $this->SolicitudObservada . "%")->take(1)->get();
                foreach($obs as $comen){
                    $this->mensajeFirma=$comen->comentario;
            }
          }else{
            $this->mensajeFirma="";
          }
           
           
            $periodo=$solicitud->ano."-".$solicitud->mes."-01";

            if ($periodo=='--01'){
                $solicitud->fechaEnvio=$solicitud->created_at;
            }


            
            if ($solicitud->estado=="Liberada"){
                $zoho=zoho::create([
                    'mandante'=>$this->alias,
                    'id_solicitud'=>$solicitud->id,                                     //
                    'razon_mandante'=>$this->nombreMandante,                                  //
                    'rut_mandante'=>$this->rutMandante,                                       //
                    'obra'=>$this->proyecto,                                                  //
                    'razon_contratista'=>$this->nombreContratista,                            //
                    'rut_contratista'=>$this->rutContratista,                                 //
                    'periodo_ccolp'=>$periodo,                                          //
                    'periodo_a_ccolp_mes'=>0,                                           //
                    'n_trabajadores_certificar'=>$solicitud->totalvigentes,               //
                    'contrato'=>$this->contrato,                                              //
                    //'servicio_contratista'=>0,                                          //
                    'contacto_nombre'=>'N/D',                                           //
                    'contacto_telefono'=>'N/D',                                         //
                    'contacto_email'=>'N/D',                                            //
                    'estado'=>$solicitud->estado,                                       //
                    'fecha_recepcion'=>$solicitud->fechaEnvio,                          //
                    'fecha_emision'=>$solicitud->updated_at,                                                 //
                    'ejecutivo'=>$this->nombreInspector,                                      //
                    'n_certificado'=>"C-".$solicitud->certificado,                           //
                    'factura'=>0,                                                       //
                    'pagado'=>0,                                                        //
                    'dias_habiles'=>0,       
                    'observacion'=>$this->mensajeFirma,                                           //
                 
                    'otraobservacion'=>$solicitud->otraopcion
                ]);
            }else{ 
           // no liberada $periodo=$solicitud->ano."-".$solicitud->mes."-01";
                    $zoho=zoho::create([
                        'mandante'=>$this->alias,
                        'id_solicitud'=>$solicitud->id,                                     //
                        'razon_mandante'=>$this->nombreMandante,                                  //
                        'rut_mandante'=>$this->rutMandante,                                       //
                        'obra'=>$this->proyecto,                                                  //
                        'razon_contratista'=>$this->nombreContratista,                            //
                        'rut_contratista'=>$this->rutContratista,                                 //
                        'periodo_ccolp'=>$periodo,                                          //
                        'periodo_a_ccolp_mes'=>0,                                           //
                        'n_trabajadores_certificar'=>$solicitud->totalvigentes,               //
                        'contrato'=>$this->contrato,                                              //
                        //'servicio_contratista'=>0,                                          //
                        'contacto_nombre'=>'N/D',                                           //
                        'contacto_telefono'=>'N/D',                                         //
                        'contacto_email'=>'N/D',                                            //
                        'estado'=>$solicitud->estado,                                       //
                        'fecha_recepcion'=>$solicitud->fechaEnvio,                          //
                        'fecha_emision'=>"",                                                 //
                        'ejecutivo'=>$this->nombreInspector,                                      //
                        'n_certificado'=>"",                           //
                        'factura'=>0,                                                       //
                        'pagado'=>0,                                                        //
                        'dias_habiles'=>0,       
                        'observacion'=>$this->mensajeFirma,                                           //
                       
                        'otraobservacion'=>$solicitud->otroobser,
                    ]);
            // fin sin certificado                
            }          
        }
        return "ok";
    }

    public function busquedasolicitudes(){
        return view('Admin.buscadorsolicitudesadmin');
    }

    public function eliminaolicitudes(){
        return view('Admin.eliminadorsolicitudesadmin');
    }

    public function resultadobusquedaadmin(Request $request){
        $solicitudesEnviadas=solicitudeproceso::where('id',$request->solicitud_id)->get();
        foreach($solicitudesEnviadas as $solicitudes){
            $this->resp=$solicitudes->id;
        }
        if (empty($this->resp)){
            Alert::error('N° de Solicitud no Existe');
            return view('Admin.buscadorsolicitudesadmin');
        }else{
            return view('Admin.resultadobusquedaadmin',compact('solicitudesEnviadas'));
        }
    }

    public function eliminabusquedaadmin(Request $request){
          
        $solicitudesEnviadas=solicitudeproceso::where('id',$request->solicitud_id)->get();
         
        foreach($solicitudesEnviadas as $solicitudes){
            $this->resp=$solicitudes->id;
        }
        if (empty($this->resp)){
            Alert::error('N° de Solicitud no Existe');
            return view('Admin.eliminadorsolicitudesadmin');
        }else{
            $eliminasdocumentos=solicituddocumento::where('solicitudeproceso_id',$request->solicitud_id)->delete();
            $eliminaseguimiento=seguimiento::where('solicitudeproceso_id',$request->solicitud_id)->delete();
            $eliminarsolicitud=solicitudeproceso::where('id',$request->solicitud_id)->delete();
            $eliminarsolicitudzoho=zoho::where('id_solicitud',$request->solicitud_id)->delete();
            Alert::success('Solicitud Eliminada Correctamente');
            return view('Admin.eliminadorsolicitudesadmin',compact('solicitudesEnviadas'));
        }
    }

}
